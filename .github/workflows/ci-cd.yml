name: NLP Service CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security:
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit

    - name: Run Bandit security scan
      run: |
        bandit -r ./src -ll -ii -f json -o bandit-report.json || true
        
    - name: Basic dependency check
      run: |
        pip install pip-audit
        pip-audit -r requirements.backend.txt || true
        pip-audit -r requirements.frontend.txt || true

    - name: Upload security reports
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: security-reports
        path: bandit-report.json

  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --requirepass test_password
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.backend.txt
          pip install pytest pytest-cov
          
      - name: Run tests
        run: |
          pytest tests/ --cov=src --cov-report=xml
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: test_password
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push backend
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/nlp-service-backend:latest
          
      - name: Build and push frontend
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/nlp-service-frontend:latest